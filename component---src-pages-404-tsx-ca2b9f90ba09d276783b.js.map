{"version":3,"sources":["webpack:///./src/pages/404.tsx"],"names":["SiteNavCenter","ErrorTemplate","ErrorCode","ErrorDescription","colors","midgrey","ErrorLink","NotFoundPage","props","edges","data","allMarkdownRemark","css","SiteHeader","outer","className","id","inner","style","textAlign","to","PostFeed","map","node","key","fields","slug","post"],"mappings":"gOAaMA,EAAgB,mBAAH,oBAAG,CAAH,oIAWbC,EAAgB,CAAH,0CAIbC,EAAY,kBAAH,oBAAG,CAAH,mGAQTC,EAAmB,iBAAH,oBAAG,CAAH,kBAEXC,IAAOC,QAFI,sDAQhBC,EAAY,CAAH,6DAsDAC,UAtCuC,SAAAC,GACpD,IAAQC,EAAUD,EAAME,KAAKC,kBAArBF,MAER,OACE,YAAC,IAAD,KACE,YAAC,IAAD,KACE,sBAAQG,IAAG,YAAE,CAACC,IAAYC,OACxB,mBAAKC,UAAU,SACb,YAACf,EAAD,KACE,YAAC,IAAD,SAIN,oBAAMgB,GAAG,YAAYJ,IAAG,YAAE,CAACX,EAAea,OACxC,mBAAKF,IAAKK,KACR,uBAASC,MAAO,CAAEC,UAAW,WAC3B,YAACjB,EAAD,YACA,YAACC,EAAD,uBACA,YAAC,IAAD,CAAMS,IAAKN,EAAWc,GAAG,IAAzB,6BAMN,qBAAOR,IAAKE,KACV,mBAAKF,IAAKK,KACR,mBAAKL,IAAKS,KACPZ,EAAMa,KAAI,gBAAGC,EAAH,EAAGA,KAAH,OACT,YAAC,IAAD,CAAUC,IAAKD,EAAKE,OAAOC,KAAMC,KAAMJ","file":"component---src-pages-404-tsx-ca2b9f90ba09d276783b.js","sourcesContent":["import { graphql, Link } from 'gatsby';\nimport * as React from 'react';\nimport styled from '@emotion/styled';\nimport { css } from '@emotion/core';\n\nimport SiteNavLogo from '../components/header/SiteNavLogo';\nimport PostCard from '../components/PostCard';\nimport Wrapper from '../components/Wrapper';\nimport IndexLayout from '../layouts';\nimport { colors } from '../styles/colors';\nimport { inner, outer, PostFeed, SiteHeader } from '../styles/shared';\nimport { PageContext } from '../templates/post';\n\nconst SiteNavCenter = styled.nav`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  text-align: center;\n\n  .site-nav-logo {\n    margin-right: 0;\n  }\n`;\n\nconst ErrorTemplate = css`\n  padding: 7vw 4vw;\n`;\n\nconst ErrorCode = styled.h1`\n  margin: 0;\n  font-size: 12vw;\n  line-height: 1em;\n  letter-spacing: -5px;\n  opacity: 0.3;\n`;\n\nconst ErrorDescription = styled.p`\n  margin: 0;\n  color: ${colors.midgrey};\n  font-size: 3rem;\n  line-height: 1.3em;\n  font-weight: 400;\n`;\n\nconst ErrorLink = css`\n  display: inline-block;\n  margin-top: 5px;\n`;\n\ninterface NotFoundTemplateProps {\n  data: {\n    allMarkdownRemark: {\n      totalCount: number;\n      edges: Array<{\n        node: PageContext;\n      }>;\n    };\n  };\n}\n\nconst NotFoundPage: React.FC<NotFoundTemplateProps> = props => {\n  const { edges } = props.data.allMarkdownRemark;\n\n  return (\n    <IndexLayout>\n      <Wrapper>\n        <header css={[SiteHeader, outer]}>\n          <div className=\"inner\">\n            <SiteNavCenter>\n              <SiteNavLogo />\n            </SiteNavCenter>\n          </div>\n        </header>\n        <main id=\"site-main\" css={[ErrorTemplate, outer]}>\n          <div css={inner}>\n            <section style={{ textAlign: 'center' }}>\n              <ErrorCode>404</ErrorCode>\n              <ErrorDescription>Page not found</ErrorDescription>\n              <Link css={ErrorLink} to=\"\">\n                Go to the front page â†’\n              </Link>\n            </section>\n          </div>\n        </main>\n        <aside css={outer}>\n          <div css={inner}>\n            <div css={PostFeed}>\n              {edges.map(({ node }) => (\n                <PostCard key={node.fields.slug} post={node} />\n              ))}\n            </div>\n          </div>\n        </aside>\n      </Wrapper>\n    </IndexLayout>\n  );\n};\n\nexport default NotFoundPage;\n\nexport const pageQuery = graphql`\n  query {\n    allMarkdownRemark(limit: 3, sort: { fields: [frontmatter___date], order: DESC }) {\n      edges {\n        node {\n          timeToRead\n          frontmatter {\n            title\n            date\n            tags\n            image {\n              childImageSharp {\n                fluid(maxWidth: 3720) {\n                  ...GatsbyImageSharpFluid\n                }\n              }\n            }\n            author {\n              id\n              bio\n              avatar {\n                children {\n                  ... on ImageSharp {\n                    fixed(quality: 90) {\n                      src\n                    }\n                  }\n                }\n              }\n            }\n          }\n          excerpt(truncate: true)\n          fields {\n            layout\n            slug\n          }\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}